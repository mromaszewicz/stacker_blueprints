{
    "Outputs": {
        "AutoScalingGroup": {
            "Value": {
                "Ref": "AutoScalingGroup"
            }
        }, 
        "InstanceProfile": {
            "Value": {
                "Ref": "InstanceProfile"
            }
        }, 
        "InstanceProfileArn": {
            "Value": {
                "Fn::GetAtt": [
                    "InstanceProfile", 
                    "Arn"
                ]
            }
        }, 
        "LaunchConfiguration": {
            "Value": {
                "Ref": "LaunchConfiguration"
            }
        }, 
        "Role": {
            "Value": {
                "Ref": "Role"
            }
        }
    }, 
    "Resources": {
        "AutoScalingGroup": {
            "Properties": {
                "DesiredCapacity": 1, 
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfiguration"
                }, 
                "MaxSize": 3, 
                "MinSize": 1, 
                "Tags": [
                    {
                        "Key": "Name", 
                        "PropagateAtLaunch": true, 
                        "Value": "test-k8s-eks-worker"
                    }, 
                    {
                        "Key": "kubernetes.io/cluster/test-k8s", 
                        "PropagateAtLaunch": true, 
                        "Value": "owned"
                    }
                ], 
                "VPCZoneIdentifier": [
                    "net-123456", 
                    "net-123457"
                ]
            }, 
            "Type": "AWS::AutoScaling::AutoScalingGroup", 
            "UpdatePolicy": {
                "AutoScalingReplacingUpdate": {
                    "WillReplace": "true"
                }, 
                "AutoScalingRollingUpdate": {
                    "MaxBatchSize": "1", 
                    "MinInstancesInService": "1", 
                    "PauseTime": "PT5M", 
                    "WaitOnResourceSignals": "true"
                }
            }
        }, 
        "InstanceProfile": {
            "Properties": {
                "Roles": [
                    {
                        "Ref": "Role"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "LaunchConfiguration": {
            "Properties": {
                "AssociatePublicIpAddress": "false", 
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": 20
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                }, 
                "ImageId": "ami-73a6e20b", 
                "InstanceType": "t2.small", 
                "KeyName": "id_rsa_aws", 
                "SecurityGroups": [
                    "sg-def5678"
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": [
                            "\n#!/bin/bash -xe\nCA_CERTIFICATE_DIRECTORY=/etc/kubernetes/pki\nCA_CERTIFICATE_FILE_PATH=$CA_CERTIFICATE_DIRECTORY/ca.crt\nMODEL_DIRECTORY_PATH=~/.aws/eks\nMODEL_FILE_PATH=$MODEL_DIRECTORY_PATH/eks-2017-11-01.normal.json\nmkdir -p $CA_CERTIFICATE_DIRECTORY\nmkdir -p $MODEL_DIRECTORY_PATH\ncurl -o $MODEL_FILE_PATH     https://s3-us-west-2.amazonaws.com/amazon-eks/1.10.3/2018-06-05/eks-2017-11-01.normal.json\naws configure add-model --service-model file://$MODEL_FILE_PATH     --service-name eks\naws eks describe-cluster --region=${\"AWS::Region\"} --name=${ClusterName}     --query 'cluster.{certificateAuthorityData: certificateAuthority.data, endpoint: endpoint}' > /tmp/describe_cluster_result.json\ncat /tmp/describe_cluster_result.json | grep certificateAuthorityData |     awk '{print $2}' | sed 's/[,\"]//g' |     base64 -d >  $CA_CERTIFICATE_FILE_PATH\nMASTER_ENDPOINT=$(cat /tmp/describe_cluster_result.json | grep endpoint |     awk '{print $2}' | sed 's/[,\"]//g')\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\nsed -i s,MASTER_ENDPOINT,$MASTER_ENDPOINT,g /var/lib/kubelet/kubeconfig\nsed -i s,CLUSTER_NAME,\", cluster_name, \",g /var/lib/kubelet/kubeconfig\nsed -i s,REGION,${AWS::Region},g /etc/systemd/system/kubelet.service\nsed -i s,MAX_PODS,${MaxPods}\n,g /etc/systemd/system/kubelet.service\nsed -i s,MASTER_ENDPOINT,$MASTER_ENDPOINT,g /etc/systemd/system/kubelet.service\nsed -i s,INTERNAL_IP,$INTERNAL_IP,g /etc/systemd/system/kubelet.service\nDNS_CLUSTER_IP=10.100.0.10\nif [[ $INTERNAL_IP == 10.* ]] ; then DNS_CLUSTER_IP=172.20.0.10; fi\nsed -i s,DNS_CLUSTER_IP,$DNS_CLUSTER_IP,g  /etc/systemd/system/kubelet.service\nsed -i s,CERTIFICATE_AUTHORITY_FILE,$CA_CERTIFICATE_FILE_PATH,g     /var/lib/kubelet/kubeconfig\nsed -i s,CLIENT_CA_FILE,$CA_CERTIFICATE_FILE_PATH,g     /etc/systemd/system/kubelet.service\nsystemctl daemon-reload\nsystemctl restart kubelet\n/opt/aws/bin/cfn-signal -e $?     --stack ${AWS::StackName}     --resource NodeGroup     --region ${AWS::Region}\n", 
                            {
                                "ClusterName": "test-k8s", 
                                "MaxPods": 8
                            }
                        ]
                    }
                }
            }, 
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        }, 
        "Role": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy", 
                    "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy", 
                    "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
                ], 
                "Path": "/"
            }, 
            "Type": "AWS::IAM::Role"
        }
    }
}